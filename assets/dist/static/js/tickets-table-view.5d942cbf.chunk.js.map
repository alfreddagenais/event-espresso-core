{"version":3,"sources":["domain/eventEditor/ui/tickets/TicketRegistrationsLink.tsx","domain/eventEditor/ui/tickets/ticketsList/cardView/TicketQuantity.tsx","domain/eventEditor/ui/tickets/ticketsList/editable/EditableDesc.tsx","domain/eventEditor/ui/tickets/ticketsList/editable/EditableName.tsx","domain/eventEditor/ui/tickets/hooks/useRecalculateBasePrice.ts","domain/eventEditor/ui/tickets/ticketsList/editable/EditablePrice.tsx","domain/eventEditor/ui/tickets/hooks/useTicketsActionMenuItems.ts","domain/eventEditor/ui/tickets/ticketsList/actionsMenu/TicketActionsMenu.tsx","domain/eventEditor/ui/tickets/ticketsList/tableView/useHeaderRowGenerator.tsx","domain/eventEditor/ui/tickets/ticketsList/tableView/useBodyRowGenerator.tsx","domain/eventEditor/ui/tickets/ticketsList/tableView/TableView.tsx"],"names":["TicketRegistrationsLink","ticket","admin","useConfig","siteUrl","adminUrl","getAdminUrl","adminSiteUrl","page","ADMIN_ROUTES","REGISTRATIONS","eventId","useEventId","regListUrl","addQueryArgs","event_id","ticket_id","dbId","return","countTitle","__","tooltip","tooltipProps","useMemoStringify","placement","count","registrationCount","title","emphasizeZero","offset","href","React","memo","getPropsAreEqual","TicketQuantity","entity","updateEntity","useTicketMutator","id","onChange","useCallback","qty","quantity","parseInfinity","cacheId","onChangeValue","value","EditableDesc","className","onChangeDesc","description","ticketDesc","EditableName","view","lineCount","onChangeName","name","ticketName","fitText","tag","useRecalculateBasePrice","ticketId","getDataState","useInitialState","defaultBasePrice","useDefaultBasePrice","mutatePrices","useMutatePrices","updateTicket","ticketPrice","tpcData","updatedTicket","price","getBasePrice","prices","newPrices","order","isNew","calculateBasePrice","then","relatedPriceIds","reverseCalculate","EditablePrice","recalculateBasePrice","onChangePrice","amount","parseFloat","wrapperProps","CurrencyInput","placeholder","useTicketsActionMenuItems","useEntityActionsMenuItems","TicketActionsMenu","props","menuItems","useHeaderRowGenerator","filterState","displayStartOrEndDate","cells","key","type","filter","filterCellByStartOrEndDate","primary","useBodyRowGenerator","formatAmount","useMoneyDisplay","sortingEnabled","bgClassName","getBackgroundColorClassName","shortenGuid","statusClassName","status","cellsData","format","Date","startDate","ENTITY_LIST_DATE_TIME_FORMAT","endDate","sold","addZebraStripesOnMobile","TableView","useTicketsListContext","filteredEntities","sortTickets","useReorderTickets","sortResponder","bodyRowGenerator","headerRowGenerator","entities","tableId","tableCaption","onSort"],"mappings":"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","file":"static/js/tickets-table-view.5d942cbf.chunk.js","sourcesContent":["import React from 'react';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __ } from '@wordpress/i18n';\n\nimport { ADMIN_ROUTES } from '@sharedConstants/adminRoutes';\nimport getAdminUrl from '@sharedServices/utils/url/getAdminUrl';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport { RegistrationsLink } from '@appLayout/entityList';\nimport { Ticket } from '@edtrServices/apollo/types';\nimport useConfig from '@appServices/config/useConfig';\nimport useEventId from '@edtrServices/apollo/queries/events/useEventId';\n\nimport ItemCount from '@appDisplay/ItemCount';\nimport { useMemoStringify } from '@application/services/hooks';\n\ninterface Props {\n\tticket: Ticket;\n}\n\nconst TicketRegistrationsLink: React.FC<Props> = ({ ticket }) => {\n\tconst {\n\t\tsiteUrl: { admin },\n\t} = useConfig();\n\tconst adminUrl = getAdminUrl({ adminSiteUrl: admin, page: ADMIN_ROUTES.REGISTRATIONS });\n\tconst eventId = useEventId();\n\tconst regListUrl = addQueryArgs(adminUrl, {\n\t\tevent_id: eventId,\n\t\tticket_id: ticket.dbId,\n\t\treturn: 'edit',\n\t});\n\tconst countTitle = __('total registrations.');\n\tconst tooltip = __('view registrations for this ticket.');\n\tconst tooltipProps = useMemoStringify({ placement: 'top' as 'top' });\n\n\treturn (\n\t\t<ItemCount count={ticket.registrationCount} title={countTitle} emphasizeZero={false} offset={[12, -4]}>\n\t\t\t<RegistrationsLink href={regListUrl} tooltip={tooltip} tooltipProps={tooltipProps} />\n\t\t</ItemCount>\n\t);\n};\n\nexport default React.memo(TicketRegistrationsLink, getPropsAreEqual(['ticket', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport parseInfinity from '@appServices/utilities/number/parseInfinity';\nimport { InlineEditInfinity, TextProps } from '@appInputs/InlineEditInput';\nimport { useTicketMutator } from '@edtrServices/apollo/mutations';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport type { TicketItemProps } from '../types';\n\nconst TicketQuantity: React.FC<TicketItemProps> = ({ entity: ticket }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChange: TextProps['onChange'] = useCallback(\n\t\t(qty) => {\n\t\t\tconst quantity = parseInfinity(qty);\n\t\t\tif (quantity !== ticket.quantity) {\n\t\t\t\tupdateEntity({ quantity });\n\t\t\t}\n\t\t},\n\t\t[ticket.cacheId]\n\t);\n\n\treturn (\n\t\t<InlineEditInfinity\n\t\t\tonChangeValue={onChange}\n\t\t\tvalue={`${ticket.quantity}`}\n\t\t\ttooltip={__('edit quantity of tickets available...')}\n\t\t/>\n\t);\n};\n\nexport default React.memo(TicketQuantity, getPropsAreEqual(['entity', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@edtrServices/apollo/mutations';\nimport { InlineEditTextArea } from '@appInputs/InlineEditInput';\nimport { getPropsAreEqual } from '@appServices/utilities';\n\ninterface EditableDescProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditableDesc: React.FC<EditableDescProps> = ({ entity: ticket, className }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst onChangeDesc = useCallback(\n\t\t(description: string): void => {\n\t\t\tif (description !== ticket.description) {\n\t\t\t\tupdateEntity({ description });\n\t\t\t}\n\t\t},\n\t\t[ticket.description, updateEntity]\n\t);\n\n\tconst tooltip = __('edit description...');\n\n\tconst ticketDesc = ticket.description || tooltip;\n\n\treturn (\n\t\t<InlineEditTextArea className={className} onChangeValue={onChangeDesc} tooltip={tooltip} value={ticketDesc} />\n\t);\n};\n\nexport default React.memo(EditableDesc, getPropsAreEqual(['entity', 'description']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { useTicketMutator } from '@edtrServices/apollo/mutations';\nimport { InlineEditText } from '@appInputs/InlineEditInput';\nimport { getPropsAreEqual } from '@appServices/utilities';\n\ninterface EditableNameProps extends TicketItemProps {\n\tclassName?: string;\n\tview?: 'card' | 'table';\n}\n\nconst EditableName: React.FC<EditableNameProps> = ({ className, entity: ticket, view = 'card' }) => {\n\tconst { updateEntity } = useTicketMutator(ticket.id);\n\n\tconst lineCount = view === 'card' && 2;\n\n\tconst onChangeName = useCallback(\n\t\t(name: string): void => {\n\t\t\tif (name !== ticket.name) {\n\t\t\t\tupdateEntity({ name });\n\t\t\t}\n\t\t},\n\t\t[ticket.name, updateEntity]\n\t);\n\n\tconst tooltip = __('edit title...');\n\n\tconst ticketName = ticket.name || tooltip;\n\n\treturn (\n\t\t<InlineEditText\n\t\t\tclassName={className}\n\t\t\tfitText={view === 'card'}\n\t\t\tlineCount={lineCount}\n\t\t\tonChangeValue={onChangeName}\n\t\t\ttag={view === 'table' ? 'p' : 'h4'}\n\t\t\ttooltip={tooltip}\n\t\t\tvalue={ticketName}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditableName, getPropsAreEqual(['entity', 'name']));\n","import { useCallback } from 'react';\n\nimport { EntityId } from '@dataServices/types';\nimport { useInitialState } from '@edtrUI/tickets/ticketPriceCalculator/data';\nimport { calculateBasePrice } from '@edtrUI/tickets/ticketPriceCalculator/utils';\nimport { getBasePrice } from '@sharedEntities/prices/predicates/selectionPredicates';\nimport { useTicketMutator } from '@edtrServices/apollo/mutations';\nimport { useDefaultBasePrice, useMutatePrices } from '../ticketPriceCalculator/hooks';\n\ntype Callback = (ticketPrice: number) => void;\n\nconst useRecalculateBasePrice = (ticketId: EntityId): Callback => {\n\t// This will give us the exact state expected by `calculateBasePrice()`\n\tconst getDataState = useInitialState({ ticketId });\n\t// This default price will be added if there is none\n\tconst defaultBasePrice = useDefaultBasePrice();\n\tconst mutatePrices = useMutatePrices();\n\tconst { updateEntity: updateTicket } = useTicketMutator(ticketId);\n\n\treturn useCallback<Callback>(\n\t\t(ticketPrice) => {\n\t\t\tlet tpcData = getDataState(null);\n\t\t\t// Make sure the new ticket price is used\n\t\t\tconst updatedTicket = { ...tpcData?.ticket, price: ticketPrice };\n\t\t\ttpcData = { ...tpcData, ticket: updatedTicket };\n\n\t\t\tconst exitingBasePrice = getBasePrice(tpcData?.prices);\n\t\t\t// if the ticket does not have a base price,\n\t\t\t// that means it was free and now a price has been added ¯\\_(ツ)_/¯\n\t\t\tif (!exitingBasePrice) {\n\t\t\t\tconst newPrices = [\n\t\t\t\t\t// add the default price\n\t\t\t\t\t{ ...defaultBasePrice, order: 1, isNew: true },\n\t\t\t\t\t// add the existing ones, just in case we are dealing with aliens,\n\t\t\t\t\t// don't get me wrong, because only they can have other prices without a base price,\n\t\t\t\t\t// may be their taxation systen works differently, who knows ¯\\_(ツ)_/¯\n\t\t\t\t\t...tpcData?.prices,\n\t\t\t\t];\n\t\t\t\ttpcData = { ...tpcData, prices: newPrices };\n\t\t\t}\n\t\t\t// get the list of updated prices with the amount of base price updated\n\t\t\tconst newPrices = calculateBasePrice(tpcData);\n\n\t\t\tmutatePrices(newPrices).then((relatedPriceIds) => {\n\t\t\t\tupdateTicket({\n\t\t\t\t\t// this is the ticket prices amount\n\t\t\t\t\tprice: ticketPrice,\n\t\t\t\t\t// since ticket price has been changed, we need to go in reverse gear ◀️\n\t\t\t\t\treverseCalculate: true,\n\t\t\t\t\t// Make sure related prices are updated\n\t\t\t\t\tprices: relatedPriceIds,\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\t\t[defaultBasePrice, getDataState, mutatePrices, updateTicket]\n\t);\n};\n\nexport default useRecalculateBasePrice;\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport type { TicketItemProps } from '../types';\nimport { getPropsAreEqual } from '@appServices/utilities';\nimport CurrencyInput from '@appInputs/CurrencyInput';\nimport useRecalculateBasePrice from '../../hooks/useRecalculateBasePrice';\nimport { useMemoStringify } from '@application/services/hooks';\n\ninterface EditablePriceProps extends TicketItemProps {\n\tclassName?: string;\n}\n\nconst EditablePrice: React.FC<EditablePriceProps> = ({ entity: ticket, className }) => {\n\tconst recalculateBasePrice = useRecalculateBasePrice(ticket.id);\n\tconst onChangePrice = useCallback(\n\t\t({ amount }: any): void => {\n\t\t\tconst price = parseFloat(amount);\n\t\t\tif (price !== ticket.price) {\n\t\t\t\trecalculateBasePrice(price);\n\t\t\t}\n\t\t},\n\t\t[recalculateBasePrice, ticket.price]\n\t);\n\n\tconst wrapperProps = useMemoStringify({ className });\n\n\treturn (\n\t\t<CurrencyInput\n\t\t\tid={ticket.id}\n\t\t\tamount={ticket.price}\n\t\t\tplaceholder={__('set price...')}\n\t\t\twrapperProps={wrapperProps}\n\t\t\tonChange={onChangePrice}\n\t\t\ttag={'h3'}\n\t\t\ttooltip={__('edit ticket total...')}\n\t\t/>\n\t);\n};\n\nexport default React.memo(EditablePrice, getPropsAreEqual(['entity', 'price']));\n","import React from 'react';\n\nimport { Ticket } from '@edtrServices/apollo/types';\nimport { useEntityActionsMenuItems } from '@edtrHooks/index';\n\nconst useTicketsActionMenuItems = (ticket: Ticket): Array<React.ReactNode> => {\n\treturn useEntityActionsMenuItems('ticket', ticket);\n};\n\nexport default useTicketsActionMenuItems;\n","import React from 'react';\n\nimport { ActionsMenuComponentProps, EntityActionsMenu } from '@appLayout/entityActionsMenu';\nimport useTicketsActionMenuItems from '../../hooks/useTicketsActionMenuItems';\nimport { Ticket } from '@edtrServices/apollo/types';\nimport { getPropsAreEqual } from '@appServices/utilities';\n\nconst TicketActionsMenu: React.FC<ActionsMenuComponentProps<Ticket>> = ({ entity, ...props }) => {\n\tconst menuItems = useTicketsActionMenuItems(entity);\n\n\treturn <EntityActionsMenu {...props} menuItems={menuItems} />;\n};\n\nexport default React.memo(TicketActionsMenu, getPropsAreEqual(['entity', 'cacheId']));\n","import React, { useCallback } from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport { Cell } from '@appLayout/espressoTable';\nimport { filterCellByStartOrEndDate } from '@sharedServices/filterState';\nimport { HeaderRowGeneratorFn } from '@appLayout/entityList';\nimport { TicketsFilterStateManager } from '@edtrServices/filterState';\n\ntype TicketsTableHeaderRowGen = HeaderRowGeneratorFn<TicketsFilterStateManager>;\n\nconst useHeaderRowGenerator = (): TicketsTableHeaderRowGen => {\n\treturn useCallback<TicketsTableHeaderRowGen>((filterState) => {\n\t\tconst { displayStartOrEndDate } = filterState;\n\n\t\tconst cellsData: Array<Cell> = [\n\t\t\t{\n\t\t\t\tkey: 'stripe',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-col-hdr ee-entity-list-status-stripe ee-rspnsv-table-column-nano',\n\t\t\t\tvalue: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'id',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-col-hdr ee-ticket-list-col-id ee-number-column ee-rspnsv-table-column-nano',\n\t\t\t\tvalue: __('ID'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'name',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-col-hdr ee-ticket-list-col-name ee-rspnsv-table-column-bigger',\n\t\t\t\tvalue: __('Name'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'start',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-col-hdr ee-ticket-list-col-name-start ee-rspnsv-table-column-default',\n\t\t\t\tvalue: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Goes on Sale')}</span>\n\t\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('On Sale')}</span>\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'end',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-col-hdr ee-ticket-list-col-end ee-rspnsv-table-column-default',\n\t\t\t\tvalue: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Sale Ends')}</span>\n\t\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Ends')}</span>\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'price',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName:\n\t\t\t\t\t'ee-ticket-list-col-hdr ee-ticket-list-col-price ee-rspnsv-table-column-tiny ee-number-column',\n\t\t\t\tvalue: __('Price'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'quantity',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName:\n\t\t\t\t\t'ee-ticket-list-col-hdr ee-ticket-list-col-quantity ee-rspnsv-table-column-tiny ee-number-column',\n\t\t\t\tvalue: __('Quantity'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'sold',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName:\n\t\t\t\t\t'ee-ticket-list-col-hdr ee-ticket-list-col-sold ee-rspnsv-table-column-tiny ee-number-column',\n\t\t\t\tvalue: __('Sold'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'registrations',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName:\n\t\t\t\t\t'ee-ticket-list-col-hdr ee-ticket-list-col-registrations ee-rspnsv-table-column-smaller ee-centered-column',\n\t\t\t\tvalue: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<span className={'ee-rspnsv-table-long-label'}>{__('Registrations')}</span>\n\t\t\t\t\t\t<span className={'ee-rspnsv-table-short-label'}>{__('Regs')}</span>\n\t\t\t\t\t</>\n\t\t\t\t),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'actions',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-col-hdr ee-actions-column ee-rspnsv-table-column-big ee-centered-column',\n\t\t\t\tvalue: <span className={'ee-rspnsv-table-long-label'}>{__('Actions')}</span>,\n\t\t\t},\n\t\t];\n\n\t\tconst cells = cellsData.filter(filterCellByStartOrEndDate(displayStartOrEndDate));\n\n\t\treturn {\n\t\t\tcells,\n\t\t\tclassName: 'ee-editor-ticket-list-items-header-row',\n\t\t\tkey: 'ticket-header-row',\n\t\t\tprimary: true,\n\t\t\ttype: 'row',\n\t\t};\n\t}, []);\n};\n\nexport default useHeaderRowGenerator;\n","import React, { useCallback } from 'react';\nimport { format } from 'date-fns';\nimport { filter, pipe } from 'ramda';\n\nimport { addZebraStripesOnMobile } from '@appLayout/espressoTable/utils';\nimport { Cell } from '@appLayout/espressoTable';\nimport { filterCellByStartOrEndDate } from '@sharedServices/filterState';\nimport { ENTITY_LIST_DATE_TIME_FORMAT } from '@appConstants/dateFnsFormats';\nimport { getBackgroundColorClassName, status } from '@sharedEntities/tickets/helpers';\nimport { shortenGuid } from '@appServices/utilities/text';\nimport { Ticket } from '@edtrServices/apollo/types';\nimport TicketActionsMenu from '@edtrUI/tickets/ticketsList/actionsMenu/TicketActionsMenu';\nimport { useMoneyDisplay } from '@appServices/utilities/money';\nimport TicketQuantity from '../cardView/TicketQuantity';\nimport { BodyRowGeneratorFn } from '@appLayout/entityList';\nimport { TicketsFilterStateManager } from '@edtrServices/filterState';\nimport { EditableName } from '../editable';\nimport TicketRegistrationsLink from '../../TicketRegistrationsLink';\n\nimport '@application/ui/styles/root/entity-status.css';\n\ntype TicketsTableBodyRowGen = BodyRowGeneratorFn<Ticket, TicketsFilterStateManager>;\n\nconst useBodyRowGenerator = (): TicketsTableBodyRowGen => {\n\tconst { formatAmount } = useMoneyDisplay();\n\n\treturn useCallback<TicketsTableBodyRowGen>(({ entity: ticket, filterState }) => {\n\t\tconst { displayStartOrEndDate, sortingEnabled } = filterState;\n\n\t\tconst bgClassName = getBackgroundColorClassName(ticket);\n\t\tconst id = ticket.dbId || shortenGuid(ticket.id);\n\t\tconst statusClassName = status(ticket);\n\n\t\tconst name = {\n\t\t\tkey: 'name',\n\t\t\ttype: 'cell',\n\t\t\tclassName: 'ee-ticket-list-cell ee-ticket-list-col-name ee-col-name ee-rspnsv-table-column-bigger ee-rspnsv-table-hide-on-mobile',\n\t\t\tvalue: sortingEnabled ? (\n\t\t\t\tticket.name\n\t\t\t) : (\n\t\t\t\t<EditableName className={'ee-entity-list-text ee-focus-priority-5'} entity={ticket} view={'table'} />\n\t\t\t),\n\t\t};\n\n\t\tconst quantity = {\n\t\t\tkey: 'quantity',\n\t\t\ttype: 'cell',\n\t\t\tclassName: 'ee-ticket-list-cell ee-ticket-list-col-quantity ee-rspnsv-table-column-tiny ee-number-column',\n\t\t\tvalue: sortingEnabled ? ticket.quantity : <TicketQuantity entity={ticket} />,\n\t\t};\n\n\t\tconst cellsData: Array<Cell> = [\n\t\t\t{\n\t\t\t\tkey: 'stripe',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: `ee-ticket-list-cell ee-entity-list-status-stripe ${bgClassName} ee-rspnsv-table-column-nano`,\n\t\t\t\tvalue: <div className={'ee-rspnsv-table-show-on-mobile'}>{ticket.name}</div>,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'id',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-cell ee-ticket-list-col-id ee-rspnsv-table-column-nano ee-number-column',\n\t\t\t\tvalue: id,\n\t\t\t},\n\t\t\tname,\n\t\t\t{\n\t\t\t\tkey: 'start',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-cell ee-ticket-list-col-start ee-rspnsv-table-column-default',\n\t\t\t\tvalue: format(new Date(ticket.startDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'end',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-cell ee-ticket-list-col-end ee-rspnsv-table-column-default',\n\t\t\t\tvalue: format(new Date(ticket.endDate), ENTITY_LIST_DATE_TIME_FORMAT),\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'price',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName:\n\t\t\t\t\t'ee-ticket-list-col-hdr ee-ticket-list-col-price ee-rspnsv-table-column-tiny ee-number-column',\n\t\t\t\tvalue: formatAmount(ticket.price),\n\t\t\t},\n\t\t\tquantity,\n\t\t\t{\n\t\t\t\tkey: 'sold',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-cell ee-ticket-list-col-sold ee-rspnsv-table-column-tiny ee-number-column',\n\t\t\t\tvalue: ticket.sold,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'registrations',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName:\n\t\t\t\t\t'ee-ticket-list-cell ee-ticket-list-col-registrations ee-rspnsv-table-column-smaller ee-centered-column',\n\t\t\t\tvalue: sortingEnabled ? '-' : <TicketRegistrationsLink ticket={ticket} />,\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: 'actions',\n\t\t\t\ttype: 'cell',\n\t\t\t\tclassName: 'ee-ticket-list-cell ee-actions-column ee-rspnsv-table-column-big',\n\t\t\t\tvalue: sortingEnabled ? '-' : <TicketActionsMenu entity={ticket} />,\n\t\t\t},\n\t\t];\n\n\t\tconst exclude = ['row', 'stripe', 'name', 'actions'];\n\n\t\tconst cells = pipe(\n\t\t\tfilter(filterCellByStartOrEndDate(displayStartOrEndDate)),\n\t\t\taddZebraStripesOnMobile(exclude)\n\t\t)(cellsData);\n\n\t\treturn {\n\t\t\tcells,\n\t\t\tclassName: `ee-editor-date-list-view-row ${statusClassName}`,\n\t\t\tid: `ee-editor-date-list-view-row-${ticket.id}`,\n\t\t\tkey: `row-${ticket.id}`,\n\t\t\ttype: 'row',\n\t\t};\n\t}, []); // no deps\n};\n\nexport default useBodyRowGenerator;\n","import React from 'react';\nimport { __ } from '@wordpress/i18n';\n\nimport { EntityTable } from '@appLayout/entityList';\nimport useHeaderRowGenerator from './useHeaderRowGenerator';\nimport useBodyRowGenerator from './useBodyRowGenerator';\nimport { useTicketsListContext } from '@edtrServices/context/EntityListContext';\nimport { useReorderTickets } from '@edtrServices/apollo/mutations';\n\n/**\n * Displays tickets in a standard list table like view\n */\nconst TableView: React.FC = () => {\n\tconst { filterState, filteredEntities } = useTicketsListContext();\n\n\tconst { sortResponder: sortTickets } = useReorderTickets(filteredEntities);\n\n\tconst bodyRowGenerator = useBodyRowGenerator();\n\tconst headerRowGenerator = useHeaderRowGenerator();\n\n\treturn (\n\t\t<EntityTable\n\t\t\tentities={filteredEntities}\n\t\t\tfilterState={filterState}\n\t\t\tbodyRowGenerator={bodyRowGenerator}\n\t\t\theaderRowGenerator={headerRowGenerator}\n\t\t\tclassName={'ee-tickets-list-list-view ee-fade-in'}\n\t\t\ttableId='ticket-entities-table-view'\n\t\t\ttableCaption={__('Tickets')}\n\t\t\tonSort={sortTickets}\n\t\t/>\n\t);\n};\n\nexport default TableView;\n"],"sourceRoot":""}